pipeline {
    agent any

    tools {
        gradle "Gradle 7.0.1"
    }

    environment {
        BUILD_TARGET_HOME = "/your/build/target/directory"
        SSH_CONNECTION_CREDENTIAL = "your-jenkins-credential-name"
        SSH_SERVER_ID = "yourSshServerAccount"
        SSH_SERVER_DOMAIN = "yourSshServerDomainName"
        GRADLE_TYPE = "bootJar"

        SERVICE_GATEWAY = "gateway"
        SERVICE_API = "api"
        SERVICE_BOOK = "book"
        SERVICE_USER = "user"
        SERVICE_ADMIN = "admin"

        DOCKER_SERVICE_NAME = "" //TODO 컨테이너명 동일하게 맞추고 적용
    }

    stages {
        stage('Build') {
            parallel {
                stage('build-service-gateway') {
                    when {
                        anyOf {
                            changeset "${SERVICE_GATEWAY}/**/*"
                        }
                    }
                    steps {
                        echo "Build Start ${SERVICE_GATEWAY}"
                        sh "./gradlew ${SERVICE_GATEWAY}:clean"
                        sh "./gradlew ${SERVICE_GATEWAY}:${GRADLE_TYPE} -x test"
                        echo "Build End ${SERVICE_GATEWAY}"
                    }
                }

                stage('build-service-book') {
                    when {
                        anyOf {
                            changeset "${SERVICE_BOOK}/**/*"
                        }
                    }

                    steps {
                        echo "Build Start ${SERVICE_BOOK}"
                        sh "./gradlew ${SERVICE_BOOK}:clean"
                        sh "./gradlew ${SERVICE_BOOK}:${GRADLE_TYPE} -x test"
                        echo "Build End ${SERVICE_BOOK}"
                    }
                }

                stage('build-service-user') {
                    when {
                        anyOf {
                            changeset "${SERVICE_USER}/**/*"
                        }
                    }

                    steps {
                        echo "Build Start ${SERVICE_USER}"
                        sh "./gradlew ${SERVICE_USER}:clean"
                        sh "./gradlew ${SERVICE_USER}:${GRADLE_TYPE} -x test"
                        echo "Build End ${SERVICE_USER}"
                    }
                }

                stage('build-service-api') {
                    when {
                        anyOf {
                            changeset "${SERVICE_API}/**/*"
                        }
                    }

                    steps {
                        echo "Build Start ${SERVICE_API}"
                        sh "./gradlew ${SERVICE_API}:clean"
                        sh "./gradlew ${SERVICE_API}:${GRADLE_TYPE} -x test"
                        echo "Build End ${SERVICE_API}"
                    }
                }

                stage('build-service-admin') {
                    when {
                        anyOf {
                            changeset "${SERVICE_ADMIN}/**/*"
                            }
                        }

                    steps {
                        echo "Build Start ${SERVICE_ADMIN}"
                        sh "./gradlew ${SERVICE_ADMIN}:clean"
                        sh "./gradlew ${SERVICE_ADMIN}:${GRADLE_TYPE} -x test"
                        echo "Build End ${SERVICE_ADMIN}"
                        }
                    }

            }
        }

        stage('Deploy') {
            parallel {
                stage('deploy-service-gateway') {
                    when {
                        anyOf {
                            changeset "${SERVICE_GATEWAY}/**/*"
                        }
                    }

                    steps {
                        sshagent([SSH_CONNECTION_CREDENTIAL]) {
                            echo "Deploy Start ${SERVICE_GATEWAY}"
                            sh "scp -o 'StrictHostKeyChecking no' -r ${WORKSPACE}/${SERVICE_GATEWAY}/build/libs/*.jar ${SSH_SERVER_ID}@${SSH_SERVER_DOMAIN}:${BUILD_TARGET_HOME}/${SERVICE_GATEWAY}"
                            sh "ssh -o 'StrictHostKeyChecking=no' ${SSH_SERVER_ID}@${SSH_SERVER_DOMAIN} 'docker-compose -f ${BUILD_TARGET_HOME}/docker-compose-dev.yml restart svr-mobi-book-gateway-service-v2'"
                            echo "Deploy End ${SERVICE_GATEWAY}"
                        }
                    }
                }

                stage('deploy-service-book') {
                    when {
                        anyOf {
                            changeset "${SERVICE_BOOK}/**/*"
                        }
                    }

                    steps {
                        sshagent([SSH_CONNECTION_CREDENTIAL]) {
                            echo "Deploy Start ${SERVICE_BOOK}"
                            sh "scp -o 'StrictHostKeyChecking no' -r ${WORKSPACE}/${SERVICE_BOOK}/build/libs/*.jar ${SSH_SERVER_ID}@${SSH_SERVER_DOMAIN}:${BUILD_TARGET_HOME}/${SERVICE_BOOK}"
                            sh "ssh -o 'StrictHostKeyChecking=no' ${SSH_SERVER_ID}@${SSH_SERVER_DOMAIN} 'docker-compose -f ${BUILD_TARGET_HOME}/docker-compose-dev.yml restart svr-mobi-book-api-v2'"
                            echo "Deploy End ${SERVICE_BOOK}"
                        }
                    }
                }

                stage('deploy-service-user') {
                    when {
                        anyOf {
                            changeset "${SERVICE_USER}/**/*"
                        }
                    }

                    steps {
                        sshagent([SSH_CONNECTION_CREDENTIAL]) {
                            echo "Deploy Start ${SERVICE_USER}"
                            sh "scp -o 'StrictHostKeyChecking no' -r ${WORKSPACE}/${SERVICE_USER}/build/libs/*.jar ${SSH_SERVER_ID}@${SSH_SERVER_DOMAIN}:${BUILD_TARGET_HOME}/${SERVICE_USER}"
                            sh "ssh -o 'StrictHostKeyChecking=no' ${SSH_SERVER_ID}@${SSH_SERVER_DOMAIN} 'docker-compose -f ${BUILD_TARGET_HOME}/docker-compose-dev.yml restart svr-mobi-user-api-v2'"
                            echo "Deploy End ${SERVICE_USER}"
                        }
                    }
                }

                stage('deploy-service-api') {
                    when {
                        anyOf {
                            changeset "${SERVICE_API}/**/*"
                        }
                    }

                    steps {
                        sshagent([SSH_CONNECTION_CREDENTIAL]) {
                            echo "Deploy Start ${SERVICE_API}"
                            sh "scp -o 'StrictHostKeyChecking no' -r ${WORKSPACE}/${SERVICE_API}/build/libs/*.jar ${SSH_SERVER_ID}@${SSH_SERVER_DOMAIN}:${BUILD_TARGET_HOME}/${SERVICE_API}"
                            sh "ssh -o 'StrictHostKeyChecking=no' ${SSH_SERVER_ID}@${SSH_SERVER_DOMAIN} 'docker-compose -f ${BUILD_TARGET_HOME}/docker-compose-dev.yml restart mobi-book-api-service'"
                            echo "Deploy End ${SERVICE_API}"
                        }
                    }
                }

                stage('deploy-service-admin') {
                    when {
                        anyOf {
                            changeset "${SERVICE_ADMIN}/**/*"
                        }
                    }

                    steps {
                        sshagent([SSH_CONNECTION_CREDENTIAL]) {
                            echo "Deploy Start ${SERVICE_ADMIN}"
                            sh "scp -o 'StrictHostKeyChecking no' -r ${WORKSPACE}/${SERVICE_ADMIN}/build/libs/*.jar ${SSH_SERVER_ID}@${SSH_SERVER_DOMAIN}:${BUILD_TARGET_HOME}/${SERVICE_ADMIN}"
                            sh "ssh -o 'StrictHostKeyChecking=no' ${SSH_SERVER_ID}@${SSH_SERVER_DOMAIN} 'docker-compose -f ${BUILD_TARGET_HOME}/docker-compose-dev.yml restart mobi-book-admin-service'"
                            echo "Deploy End ${SERVICE_ADMIN}"
                        }
                    }
                }
            }

        }
    }
}